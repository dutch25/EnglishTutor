from fastapi import FastAPI
from fastapi.responses import StreamingResponse
from fastapi.middleware.cors import CORSMiddleware
import mysql.connector
import requests
import os
from dotenv import load_dotenv
from google import genai
from google.genai import types
from whisper import router as whisper_router   # ‚úÖ router c·ªßa whisper
from auth_routes import router as auth_router  # ‚úÖ router login/register
from profile_router import router as profile_router  # ‚úÖ router qu·∫£n l√Ω t√†i kho·∫£n ng∆∞·ªùi d√πng

# ‚úÖ Kh·ªüi t·∫°o FastAPI
app = FastAPI()

# ‚úÖ C·∫•u h√¨nh CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ‚úÖ Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")
VOICE_ID = "tnSpp4vdxKPjI9w0GnoV"  # Replace with your voice ID

# ‚úÖ Import router whisper & auth
app.include_router(whisper_router)  # API li√™n quan ƒë·∫øn Whisper
app.include_router(auth_router)     # API ƒëƒÉng nh·∫≠p & ƒëƒÉng k√Ω
app.include_router(profile_router)  # API qu·∫£n l√Ω t√†i kho·∫£n ng∆∞·ªùi d√πng

# ‚úÖ API Root
@app.get("/")
def read_root():
    return {"message": "Welcome to the English Tutor API"}

# ‚úÖ API l·∫•y audio t·ª´ ElevenLabs
@app.get("/audio/{word}")
def get_audio(word: str, speed: float = 0.75):
    url = f"https://api.elevenlabs.io/v1/text-to-speech/{VOICE_ID}"
    headers = {
        "xi-api-key": ELEVENLABS_API_KEY,
        "Content-Type": "application/json"
    }
    payload = {
        "text": word,
        "model_id": "eleven_monolingual_v1",
        "voice_settings": {
            "stability": 0.75,
            "speed": speed,
            "similarity_boost": 0.75
        }
    }

    response = requests.post(url, headers=headers, json=payload, stream=True)

    if response.status_code != 200:
        print("‚ùå ElevenLabs error:", response.status_code)
        print("üîç Response:", response.text)
        return {"error": "Failed to generate audio"}

    return StreamingResponse(response.raw, media_type="audio/mpeg")

# ‚úÖ API Chat v·ªõi Gemini
# ‚úÖ API Chat v·ªõi Gemini
@app.post("/chat")
async def chat(data: dict):
    user_message = data.get("message", "")

    # ‚úÖ Prompt h∆∞·ªõng d·∫´n th√™m
    system_prompt = (
        "B·∫°n l√† m·ªôt gia s∆∞ ti·∫øng Anh chuy√™n gi√∫p ng∆∞·ªùi Vi·ªát luy·ªán nghe v√† n√≥i. "
        "H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu, v√† ph√π h·ª£p cho m·ªçi tr√¨nh ƒë·ªô."
    )

    client = genai.Client()
    response = client.models.generate_content(
        model="gemini-2.5-flash",
        contents=f"{system_prompt}\nNg∆∞·ªùi h·ªçc: {user_message}",
        config=types.GenerateContentConfig(
            thinking_config=types.ThinkingConfig(thinking_budget=0)
        ),
    )
    return {"reply": response.text}

# ‚úÖ K·∫øt n·ªëi MySQL (n·∫øu c·∫ßn d√πng tr·ª±c ti·∫øp ngo√†i ORM)
db = mysql.connector.connect(
    host="localhost",
    user="root",
    port=3306,
    password="",
    database="english_tutor",
)
cursor = db.cursor()

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
